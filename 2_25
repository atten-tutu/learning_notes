58-
父组件改变子组件
ref给组件打标识、
子：defineExpose({toy,book}) 宏函数
父:c1.value.toy
$refs:值是对象，包含所有儿子（键值对？）
refs[key].book+=3
$parent:父传子,函数参数
 子调用，父暴露
59
reactive中有ref会自动解包(响应式对象)
ref单独需要.value
60
provide inject祖孙传递
爷：
import {provide} from 'vue'
provide('qian',money)
孙：
import {inject} from 'vue'
inject('qian')
//默认插槽，好丸
category.vue(作为子组件),中的<slot></slot>可以插入自适应
<category title="lalala"/>
父传子，子组件defineprops
<category>





</category>
//具名插槽
<Category>
 <template  v-slot:s2>
v-slot在最后一个可以用#代替
    标签
readonly:创建一个对象的深只读副本
shallowreadonly:只作用于顶层，内部嵌套属性仍然可变


toRaw：响应式对象的原始对象
let person2 = toRaw(person):原始数据
属性直接给
对象给别人用，修改，但是不响应到页面上
markraw:永远不会响应式
丢失响应式

customRef
initvalue =  "你好"
let msg = customRef((track,trigger)=>{
return {
    get(){
       track()//告诉vue msg很重要，要对他进行持续关注，一旦msg变化，更新
       return initvalue
    },//msg被读取
    set(value){
         initvalue=value,是修改的最新值
         trigger()//通知vue,数据msg变化了
    }//msg被改
}
})

hooks:src中建设useMMM.ts  好像是复用，封装函数
hooks要有返回值，返回一个对象
Teleport:传送门
App.vue:父组件
Modal.vue:模态组件
弹窗从app div弹到body
<button @click="isShow=true">
position:fixed
left:50%
margin-left:-100px
<teleport to='body'>
</teleport>


suspense
axios
import axios from 'axios'
let{data:{content}} = await axios.get() promise实例
子组件有异步任务
import {Suspense} from 'vue'
<suspense>
<template v-slot:fallback>
<Child />

main.ts中:注册全局组件
import
app.component('hello',hello)

全局变量app.config.globalproperties.x
declare module 'vue'{
interface 
}

注册全局指令
v-beauty="sum"
app.use:安装插件
非兼容性改变：
